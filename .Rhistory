dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants,15)
summary(plants)
plants$Active_Growth_Period
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size= 100, prob =0.7)
flips2 <- rbinom(1, size= 100, prob =0.7)
flips2 <- rbinom(100, size= 1, prob =0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
?sample
ample(1:6, 4,replace = TRUE).
sample(1:6, 4,replace = TRUE)
sample(1:6, 4,replace = TRUE)
sample(1:20, 10)
letters
LETTERS
sample(LETTERS)
sample(c(0,1),100,replace = TRUE, prob = c(0,3,0,7))
sample( c(0,1), size = 100, replace = TRUE, prob = c(0.3,0.7))
flips <- sample( c(0,1), size = 100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <-  rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
1
hist(cm)
swirl()
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
ploy(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
?plot
plot(x = cars$speed, y = cars$dist, xlab = Speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
?plot
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2
)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
# These functions demonstrate the ablility to use lexical scoping
# to cache potentially time-consuming computations.
# For example, taking the mean of a numeric vector is typically a fast operation.
# For repeated computations If the contents of a object are not changing,
# it may make sense to cache the value of that object so that when we need it
# again, it can be looked up in the cache rather than recomputed.
# The makeCacheMatrix function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv_mat <- NULL
set <- function(temp) {
x <<- temp
inv_mat <<- NULL
}
get <- function() x
setinv <- function(t) inv_mat <<- t
getinv <- function() inv_mat
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
# This cacheSolve function computes the inverse of the special "matrix" returned
# by makeCacheMatrix above. If the inverse has already been calculated
# (and the matrix has not changed), then cacheSolve should retrieve the
# inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv_mat <- x$getinv()
if(!is.null(inv_mat)){
print("Getting cached data no computation")
return(inv_mat)
}
inv_mat <- solve(x$get(), ...)
x$setinv(inv_mat)
print("The uncached version")
inv_mat
}
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
source('C:/Users/admin/Desktop/DATASCIENCE/WORKFILES/assignment2/ProgrammingAssignment2/cachematrix.R')
?eval
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num =5)
remainder(4, div =2)
args(remainder)
submit()
library(datasets)
data("airquality")
summary(airquality)
getwd()
setwd("C:/Users/admin/Desktop/DATASCIENCE/WORKFILES/RR Assignment/RepData_PeerAssessment1")
?dir
dir()
?read.csv
data = read.csv(activity.csv)
data = read.csv(file = "activity.csv")
head(data)
summary(data)
class(data)
class(data?date)
data?date
class(data[2])
class(data[,2])
class(data[,1])
class(data[,3])
data.date
data?steps
rm(list = setdiff(ls(), lsf.str()))
data_new = read.csv(file = "activity.csv")
summary(data_new)
head(data_new)
class(date_new$date)
class(data_new$date)
data_new$date = as.character(data_new$date)
class(data_new$date)
head(data_new)
data_new$date = as.date(data_new$date)
?as.date()
data_new$date = as.Date(data_new$date)
class(data_new$date)
head(data_new)
summary(data_new)
?complete.cases
data_1 = data_new[complete.cases(data_new)]
data_1 = data_new[complete.cases(data_new),]
summary(data_1)
head(data_1)
?head
head(data_1,100)
head(data_1,1500)
sum(data_1$steps)
total <- sum(data_1$steps)
total
?unique
?sum
?count
?size
?length
length(unique(data_1$date))
unique(data_1$date)
data_1[,data_1$interval = 5]
data_1[,data_1$interval == 5]
data_1[data_1$interval == 5,]
summary(data_1[data_1$interval == 5,])
data_1[data_1$interval == 5,]
count_1 = length(unique(data_1$date))
total_1 <- sum(data_1$steps)
data_2 <- split(data_1,data_1$date)
data_2
data_2 <- split(data_1,data_1$date)
lapply(data2$steps, sum)
lapply(data_2$steps, sum)
x1 <- lapply(data_2$steps, sum)
x1
class(data_2@steps)
class(data_2$steps)
class(data_2)
class(data_2)
data_2[1][,1]
data_2[1]
class(data_2[1])
data_2[1][1]
data_2[1]$steps
data_2[1,1]
data_2[1][1,]
?split
split(data_1$steps,data_1$date)
data_2 <- split(data_1$steps,data_1$date)
lapply(data_2,sum)
data_3 <- lapply(data_2,sum)
?hist
hist(data_3)
class(data_3)
data_3 <- sapply(data_2,sum)
class(data_3)
data_3
hist(data_3)
hist(data_3, xlab="Number of steps taken", ylab="Frequency", main="Histogram of steps", border="blue", col="green")
hist(data_3, xlab="Number of steps taken", ylab="Frequency", main="Histogram of steps", border="blue", col="green", ylim=c(1,53))
hist(data_3, xlab="Number of steps taken", ylab="Frequency", main="Histogram of steps", border="blue", col="green", ylim=c(0,30))
summary(data_3)
?mean
mean(data_3)
?median
median(data_3)
?mean
?round
round(mean(data_3),3)
x1 <- mean(data_3)
x1
round(x1,1)
round(x1,2)
round(x1,3)
round(x1,4)
data_4 <- split(data_1$steps,data_1$interval)
head(data_4)
data_5 <- sapply(data_4,mean)
data_5
steps_in_time_series <- ts(data_5)
steps_in_time_series
plot.ts(steps_in_time_series)
plot(data_5,type = "1")
plot(data_5,type = "l")
plot.ts(steps_in_time_series)
plot(data_5,type = "l")
?ts
steps_in_time_series <- ts(data_5,frequency = 5)
plot.ts(steps_in_time_series)
steps_in_time_series <- ts(data_5,start = 0, end = 2355,frequency = 5)
plot.ts(steps_in_time_series)
steps_in_time_series <- ts(data_5)
plot.ts(steps_in_time_series)
steps_in_time_series <- ts(data_5,start = 0, end = 2355,frequency = 288)
plot.ts(steps_in_time_series)
steps_in_time_series <- ts(data_5, start = 0, end = 2355,frequency = 1)
plot.ts(steps_in_time_series)
?ts
steps_in_time_series <- ts(data_5, start = 0, end = 2355)
plot.ts(steps_in_time_series)
length(data_new[!complete.cases(data_new),]
)
summary(data_new)
complete.cases(data_new)
length(complete.cases(data_new)) - sum(complete.cases(data_new))
fc <- data_new$steps
fv
fc
data_new[!complete.cases(data_new),]
for(i=0;i<max(data_new$interval);i+=5)
print(i)
for(i=0;i<max(data_new$interval);i+=5)
print(i)
for(i in 5:200)
print(i)
for (i in data_new$interval)
print(i)
data_na <- data_new[!complete.cases(data_new),]
length(data_na)
data_na
sapply(data_na$steps,function(x) x <- data_5$y, y = data_na$interval)
aggregate(steps ~ interval, data_new, mean)
?aggregate
steps_per_interval <- aggregate(steps ~ interval, data_new, mean)
max(steps_per_interval$steps)
steps_per_interval[which.max(steps_per_interval$steps),1]
?transform
data_5
steps_per_interval
class(data_5)
class(steps_per_interval)
bad_data <- data_new[!complete.cases(data_new),]
nrows(bad_data)
nrow(bad_data)
bad_data[,bad_data$interval == 0] <- steps_per_interval[steps_per_interval$interval == 0,2]
bad_data[,bad_data$interval == 0]
bad_data[bad_data$interval == 0,]
bad_data[bad_data$interval == 0,]$steps
steps_per_interval[steps_per_interval$interval == i,2]
steps_per_interval[steps_per_interval$interval == 0,2]
steps_per_interval[steps_per_interval$interval == 1,2]
steps_per_interval[steps_per_interval$interval == 5,2]
steps_per_interval
seq(0,2355,5)
bad_data[bad_data$interval == 0,]$steps <- steps_per_interval[steps_per_interval$interval == 0,2]
bad_data
for(i in steps_per_interval$interval)
{
bad_data[bad_data$interval == 0,]$steps <- steps_per_interval[steps_per_interval$interval == i,2]
}
bad_data
for(i in steps_per_interval$interval)
{
bad_data[bad_data$interval == i,]$steps <- steps_per_interval[steps_per_interval$interval == i,2]
}
bad_data
summary(bad_data)
good_data <- data_new[complete.cases(data_new),]
?rbind
corr_data <- rbind(good_data,bad_data)
summary(corr_data)
head(corr_data)
new_df <- corr_data[ order(row.names(corr_data)), ]
head(new_df)
new_df <- corr_data[ order(as.numeric(row.names(corr_data))), ]
head(new_df)
new_graph <- aggregate(steps ~ date, new_df, sum)
new_graph
mean(new_graph$steps)
data_3
sum(data_3)
?weekdays
weekdays(as.Date(new_df$date))
for(i in nrow(new_df))
{
bad_data[bad_data$interval == i,]$steps <- steps_per_interval[steps_per_interval$interval == i,2]
}
for(i in nrow(new_df))
{
if(weekdays(new_df$date) in wds)
}
for(i in nrow(new_df))
{
if(weekdays(new_df$date) == "Monday" |
weekdays(new_df$date) == "Tuesday" |
weekdays(new_df$date) == "Wednesday"|
weekdays(new_df$date) == "Thursday"|
weekdays(new_df$date) == "Friday")
{
new_df$dayofweek == "Weekday"
}
else
{
new_df$dayofweek == "Weekend"
}
}
for(i in nrow(new_df))
{
if(weekdays(new_df$date) == "Monday" ||
weekdays(new_df$date) == "Tuesday" ||
weekdays(new_df$date) == "Wednesday"||
weekdays(new_df$date) == "Thursday"||
weekdays(new_df$date) == "Friday")
{
new_df$dayofweek == "Weekday"
}
else
{
new_df$dayofweek == "Weekend"
}
}
new_df
colbind(new_df,new_df$dayofweek)
cbind(new_df,new_df$dayofweek)
new_df$dayofweek == "dof"
new_df
for(i in nrow(new_df))
{
if(weekdays(new_df[i,]$date) == "Monday" ||
weekdays(new_df[i,]$date) == "Tuesday" ||
weekdays(new_df[i,]$date) == "Wednesday"||
weekdays(new_df[i,]$date) == "Thursday"||
weekdays(new_df[i,]$date) == "Friday")
{
new_df[i,]$dayofweek <- "Weekday"
}
else
{
new_df[i,]$dayofweek <- "Weekend"
}
}
new_df
new_df$dow <- "new"
new_df
for(i in nrow(new_df))
{
if(weekdays(new_df[i,]$date) == "Monday" ||
weekdays(new_df[i,]$date) == "Tuesday" ||
weekdays(new_df[i,]$date) == "Wednesday"||
weekdays(new_df[i,]$date) == "Thursday"||
weekdays(new_df[i,]$date) == "Friday")
{
new_df[i,]$dow <- "Weekday"
}
else
{
new_df[i,]$dow <- "Weekend"
}
}
new_df
new_df[1,]$date
weekdays(new_df[1,]$date)
weekdays(new_df[i,]$date) == "Monday"
weekdays(new_df[1,]$date) == "Monday"
new_df[1,]$dow <- "Weekday"
new_df
for(i in nrow(new_df))
{
if(weekdays(new_df[i,]$date) == "Monday" ||
weekdays(new_df[i,]$date) == "Tuesday" ||
weekdays(new_df[i,]$date) == "Wednesday"||
weekdays(new_df[i,]$date) == "Thursday"||
weekdays(new_df[i,]$date) == "Friday")
{
new_df[i,]$dow <- "Weekday"
}
else
{
new_df[i,]$dow <- "Weekend"
}
}
new_df
for(i in 1:nrow(new_df))
{
if(weekdays(new_df[i,]$date) == "Monday" ||
weekdays(new_df[i,]$date) == "Tuesday" ||
weekdays(new_df[i,]$date) == "Wednesday"||
weekdays(new_df[i,]$date) == "Thursday"||
weekdays(new_df[i,]$date) == "Friday")
{
new_df[i,]$dow <- "Weekday"
}
else
{
new_df[i,]$dow <- "Weekend"
}
}
nnew_df
new_df
corrected_data <- new_df[,1:3]
head(corrected_data)
for(i in 1:nrow(corrected_data))
{
if(weekdays(corrected_data[i,]$date) == "Monday" ||
weekdays(corrected_data[i,]$date) == "Tuesday" ||
weekdays(corrected_data[i,]$date) == "Wednesday"||
weekdays(corrected_data[i,]$date) == "Thursday"||
weekdays(corrected_data[i,]$date) == "Friday")
{
corrected_data[i,]$dayofweek <- "Weekday"
}
else
{
corrected_data[i,]$dayofweek <- "Weekend"
}
}
warnings()
corrected_data
corrected_data$dayofweek = "new"
for(i in 1:nrow(corrected_data))
{
if(weekdays(corrected_data[i,]$date) == "Monday" ||
weekdays(corrected_data[i,]$date) == "Tuesday" ||
weekdays(corrected_data[i,]$date) == "Wednesday"||
weekdays(corrected_data[i,]$date) == "Thursday"||
weekdays(corrected_data[i,]$date) == "Friday")
{
corrected_data[i,]$dayofweek <- "Weekday"
}
else
{
corrected_data[i,]$dayofweek <- "Weekend"
}
}
corrected_data
summary(corrected_data)
corrected_data$dayofweek = as.factor(corrected_data$dayofweek)
summary(corrected_data)
corr_steps_intr <- aggregate(steps ~ interval + dayofweek, corrected_data, mean)
library(lattice)
xyplot(corr_steps_intr$steps ~ corr_steps_intr$interval|corr_steps_intr$dayofweek, main="Average Steps per Day by Interval",xlab="Interval", ylab="Steps",layout=c(1,2), type="l")
